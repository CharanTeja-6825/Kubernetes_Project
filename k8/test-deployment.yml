apiVersion: v1
kind: Namespace
metadata:
  name: test-app
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: test-app
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  mysql-deployment
  namespace: test-app
spec:
  selector:
    matchLabels:
      app: mysql-deployment
  replicas: 1
  template:
    metadata:
      labels:
        app:  mysql-deployment
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name:  mysql-pod
        image:  mysql:8
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
        env:
          - name: MYSQL_ROOT_PASSWORD
            value: password
          - name: MYSQL_DATABASE
            value: projectdb
        ports:
        - containerPort:  3306
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: test-app
spec:
  selector:
    app: mysql-deployment
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
    # If you set the `spec.type` field to `NodePort` and you want a specific port number,
    # you can specify a value in the `spec.ports[*].nodePort` field.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  backend-deployment
  namespace: test-app
  labels:
    app:  backend-deployment
spec:
  selector:
    matchLabels:
      app: backend-deployment
  replicas: 2
  template:
    metadata:
      labels:
        app:  backend-deployment
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name:  backend-pod
        image:  charanteja1964/k8-backend:latest
        resources:
          requests:
            cpu: 500m      # half CPU core
            memory: 512Mi  # 512 MB guaranteed
          limits:
            cpu: 1000m     # up to 1 full CPU core
            memory: 1Gi    # 1 GB max
        ports:
        - containerPort:  2000
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: test-app
spec:
  selector:
    app: backend-deployment
  
  ports:
    - protocol: TCP
      port: 2000
      targetPort: 2000
    # If you set the `spec.type` field to `NodePort` and you want a specific port number,
    # you can specify a value in the `spec.ports[*].nodePort` field.
      nodePort: 30025
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  frontend-deployment
  namespace: test-app
spec:
  selector:
    matchLabels:
      app: frontend-deployment
  replicas: 2
  template:
    metadata:
      labels:
        app:  frontend-deployment
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name:  frontend-pod
        image:  charanteja1964/k8-frontend:latest
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 256Mi
        env:
        - name: VITE_API_URL
          value: "https://localhost:33025"
        ports:
        - containerPort:  80
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: test-app
spec:
  selector:
    app: frontend-deployment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      # If you set the `spec.type` field to `NodePort` and you want a specific port number,
      # you can specify a value in the `spec.ports[*].nodePort` field.
      nodePort: 30080
  type: NodePort